from datetime import datetime

from bson.objectid import ObjectId
from flask_restful import Resource, request, reqparse

from config import MongoConfig, APIConfig
from model import connection


class PostsList(Resource):
    def get(self, theme_id):  # get all posts
        parser = reqparse.RequestParser()
        parser.add_argument('page',
                            type=int,
                            help='page number must be int')
        args = parser.parse_args()
        if args['page'] is None:
            args['page'] = 1
        index = args['page'] - 1
        collection = connection[MongoConfig.DB]["posts_" + theme_id]
        cursor = collection.Posts.find(
            skip=(index * APIConfig.PAGESIZE),
            limit=APIConfig.PAGESIZE,
            max_scan=APIConfig.MAX_SCAN,
            sort=[("_updated", -1)])  # sorted by update time in reversed order
        return cursor

    def post(self, theme_id):  # add a new post
        utctime = datetime.timestamp(datetime.utcnow())
        resp = request.get_json(force=True)
        # save a post
        collection = connection[MongoConfig.DB]["posts_" + theme_id]
        doc = collection.Posts()
        for item in resp:
            doc[item] = resp[item]
        doc['_id'] = str(ObjectId())
        doc['_created'] = utctime
        doc['_updated'] = utctime
        doc.save()
        # save a record
        user_posts = connection.UserPosts()
        user_posts['user_id'] = doc['author']
        user_posts['theme_id'] = theme_id
        user_posts['post_id'] = doc['_id']
        user_posts['_created'] = utctime
        user_posts.save()
        return {"_id": doc['_id']}, 201  # return post_id generated by system


class Post(Resource):
    def get(self, theme_id, post_id):  # get a post by its ID
        collection = connection[MongoConfig.DB]["posts_" + theme_id]
        cursor = collection.Posts.find({"_id": ObjectId(post_id)})
        return cursor

    def put(self, theme_id, post_id):  # update a post by its ID
        resp = request.get_json(force=True)
        collection = connection[MongoConfig.DB]["posts_" + theme_id]
        doc = collection.Posts()
        for item in resp:
            doc[item] = resp[item]
        doc["_id"] = post_id
        doc.save()
        return None, 204

    def delete(self, theme_id, post_id):  # delete a post by its ID
        collection = connection[MongoConfig.DB]["posts_" + theme_id]
        collection.Posts.find_and_modify(
            {"_id": ObjectId(post_id)}, remove=True)
        # delete related comments
        collection.Comments.find_and_modify(
            {"post_id": ObjectId(post_id)}, remove=True)
        return None, 204


class FavorPost(Resource):
    def post(self, post_id):
        resp = request.get_json(force=True)
        count = connection.UserStars.find(
            {
                "post_id": post_id,
                "user_id": resp['user_id'],
                "theme_id": resp['theme_id']
            }
        ).count()
        if count == 0:  # do nothing if repeatedly submits happened
            doc = connection.UserStars()
            for item in resp:
                doc[item] = resp[item]
            doc.save()
            return None, 201
        else:
            return {'message': 'Record Exists!'}, 200


    def delete(self, post_id):
        resp = request.get_json(force=True)
        connection.UserStars.find_and_modify(
            {
                "post_id": post_id,
                "user_id": resp['user_id'],
                "theme_id": resp['theme_id']
            },
            remove=True
        )
        return None, 204
